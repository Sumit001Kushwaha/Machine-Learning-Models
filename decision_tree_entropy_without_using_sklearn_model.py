# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pcufoDSUSxm811VFs75dc4HImHf8f46v
"""

import pandas as pd
import math

df = pd.read_csv('tennis.csv')
print(df)

values = df.value_counts(df.columns[-1])
info = 0
for cl in values.index.tolist():
  info -= (values[cl]/len(df))*math.log2(values[cl]/len(df))
print(info)

def cal_Info(DataFrame,feature):
  branches=DataFrame[feature].value_counts()
  info=0
  for branch in branches.index.tolist():
    count=DataFrame[DataFrame[feature]==branch].value_counts(DataFrame.columns[-1])
    br=0
    for cl in count.index.tolist():
      br += (count[cl]/branches[branch])*math.log2(count[cl]/branches[branch])
    info += (branches[branch]/len(df))*br
  return -info

features = df.columns[:-1]
root = 0
root_feature = ''
for feature in features:
  feature_info = cal_Info(df,feature)
  print(feature,feature_info)
  print(f'{feature} gain = {info-feature_info}')
  if root<= info-feature_info:
    root = info-feature_info
    root_feature = feature
print(f'root node is {root_feature}')

def build_tree(df,features,target):
  classes = df[target].value_counts()
  if len(classes)==1:
    return classes.index[0]

  if features.empty:
    return classes.index[0]

  target_info = cal_Info(df,target)
  feature_gain = {}
  for feature in features:
    feature_gain[feature] = info - cal_Info(df,feature)

  root = max(feature_gain,key=feature_gain.get)
  decision_tree = {root:{}}
  new_features=features.drop(root)
  for value in df[root].unique():
    sub_df = df[df[root]==value]
    sub_tree = build_tree(sub_df,new_features,target)
    decision_tree[root][value] = sub_tree
  return decision_tree

decision_tree=build_tree(df,df.columns[:-1],'play')
print(decision_tree)

def predict(tree,instance):
  root_node = list(tree.keys())[0]
  instance_value = instance[root_node]
  next_node = tree[root_node][instance_value]
  if type(next_node) == dict:
    return predict(next_node,instance)
  else:
    return next_node

test_data = [
    {'outlook': 'rainy', 'temp': 'mild', 'humidity': 'high', 'windy': True},
    {'outlook': 'sunny', 'temp': 'cool', 'humidity': 'normal', 'windy': False},
    {'outlook': 'overcast', 'temp': 'hot', 'humidity': 'high', 'windy': False},
    {'outlook': 'rainy', 'temp': 'cool', 'humidity': 'normal', 'windy': False},
]

# You can iterate through this list and predict for each instance
for instance in test_data:
    prediction = predict(decision_tree, instance)
    print(f"Instance: {instance}, Predicted Play: {prediction}")